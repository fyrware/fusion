# pragma once

namespace fusion::core {

    class event {

        public:
            template <class observable_type> static class observer {

                public:
                    observer& debounce (function<void(observable_type&, int)> callback);

                    observer& filter (function<bool(observable_type&, int)> callback);

                    observer& for_each (function<void(observable_type&, int)> callback);

                    template <typename return_type> observer& map (function<return_type(observable_type&, int)> callback);

                    void pipe (observable_type observable);
            };

            static class emitter {

                public:
                    void emit (string* name, map<string, int>* data);

                    observer<event> subscribe (string* name);
            };

            event (string* name, map<string, any>* data, emitter target);
    };
}
